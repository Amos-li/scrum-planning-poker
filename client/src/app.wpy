<style lang="less">
@import './style/weui.less';
@import './style/style.less';
</style>

<script>
import wepy from 'wepy';
import 'wepy-async-function';
import { setStore } from 'wepy-redux';
import configStore from './store';
import { defaultLang, USER_ID_KEY, LANG_KEY, TOKEN_KEY } from '@/utils/utils';
import T from '@/utils/i18n';
import locales from '@/utils/locales';

const store = configStore();
setStore(store);

export default class extends wepy.app {
  config = {
    pages: [
      'pages/index',
      'pages/welcome',
      'pages/create-room',
      'pages/room',
      'pages/room-detail',
      'pages/add-story'
    ],
    window: {
      backgroundTextStyle: 'light',
      backgroundColor: '#f8f8fa',
      backgroundColorTop: '#0678c1',
      backgroundColorBottom: '#f8f8fa',
      navigationBarBackgroundColor: '#0678c1',
      navigationBarTitleText: '',
      navigationBarTextStyle: 'white'
    },
    networkTimeout: {
      request: 10000,
      connectSocket: 10000,
      uploadFile: 10000,
      downloadFile: 10000
    }
  };

  globalData = {
    userInfo: null,
    userId: null,
    token: null,
    lang: defaultLang,
    isIpx: false
  };

  constructor() {
    super();
    this.use('promisify');
    this.use('requestfix');
    this.intercept('request', {
      config(p) {
        if (this.globalData.token) {
          p.header = p.header || {};
          p.header['Authorization'] = `Bearer ${this.globalData.token}`;
        }
        p.url = wepy.$appConfig.apiUrl + p.url;
        return p;
      },
      success({ statusCode, data }) {
        switch (statusCode) {
          case 200:
            return data;
          case 401:
            wepy.redirectTo({ url: 'welcome' });
            wepy.removeStorageSync(TOKEN_KEY);
            return null;
          default:
            return null;
        }
      }
    });

    this.intercept('showModal', {
      config(p) {
        p.confirmColor = p.confirmColor || '#0678c1';
        p.confirmText = p.confirmText || T._('common.button.confirm');
        p.cancelText = p.cancelText || T._('common.button.cancel');
        return p;
      }
    });

    this.intercept('showLoading', {
      config(p) {
        p.title = p.title || T._('common.loading.title');
        p.mask = p.mask === false ? false : true; // eslint-disable-line
        return p;
      }
    });
  }

  onLaunch() {
    this.registerLocales();
    this.getUserInfo();
    this.globalData.token = wepy.getStorageSync(TOKEN_KEY);
    this.globalData.userId = wepy.getStorageSync(USER_ID_KEY);
    setTimeout(() => {
      this.checkForUpdates();
    }, 1000);
    const { model } = wepy.getSystemInfoSync();
    if (model.search('iPhone X') !== -1) {
      this.globalData.isIpx = true;
    }
  }

  onShow() {
    this.checkClipboard();
  }

  async login() {
    const data = {};
    const { code } = await wepy.login();
    data.code = code;
    const { authSetting } = await wepy.getSetting();
    if (authSetting && authSetting['scope.userInfo']) {
      const { iv, encryptedData, userInfo } = await wepy.getUserInfo();
      data.iv = iv;
      data.encryptedData = encryptedData;
      this.globalData.userInfo = userInfo;
    }

    const token = await wepy.request({
      url: '/users/wxlogin',
      method: 'POST',
      data
    });
    wepy.setStorageSync(TOKEN_KEY, token);
    this.globalData.token = token;

    const user = await wepy.request({
      url: '/users/whoami',
      method: 'POST'
    });
    wepy.setStorageSync(USER_ID_KEY, user.id);
    this.globalData.userId = user.id;
  }

  async getUserInfo() {
    const { authSetting } = await wepy.getSetting();
    if (authSetting && authSetting['scope.userInfo']) {
      const { userInfo } = await wepy.getUserInfo();
      this.globalData.userInfo = userInfo;
    }
  }

  registerLocales() {
    T.registerLocales(locales);
    let lang = wepy.getStorageSync(LANG_KEY);
    if (!lang) {
      lang = this.getSystemLang();
    }
    this.globalData.lang = lang;
    T.setLocale(this.globalData.lang);
    wepy.T = T;
  }

  getSystemLang() {
    try {
      const { language } = wepy.getSystemInfoSync();
      if (language !== defaultLang) {
        return 'en';
      } else {
        return defaultLang;
      }
    } catch (error) {
      console.error(error);
      return defaultLang;
    }
  }

  async checkForUpdates() {
    const updateManager = wx.getUpdateManager();
    updateManager.onCheckForUpdate(({ hasUpdate }) => {
      if (hasUpdate) {
        updateManager.onUpdateReady(function() {
          wx.showModal({
            title: '更新提示',
            content: '新版本已经准备好，是否重启应用？',
            success: function(res) {
              if (res.confirm) {
                updateManager.applyUpdate();
              }
            }
          });
        });

        updateManager.onUpdateFailed(function() {
          wx.showModal({
            title: '更新版本失败'
          });
        });
      }
    });
  }

  async checkClipboard() {
    const { data } = await wepy.getClipboardData();
    if (data === 'debug') {
      const { confirm } = await wepy.showModal({
        title: 'Enable Debugging',
        content: 'Enable Debugging'
      });
      wepy.setClipboardData({ data: '' });
      if (confirm) {
        wepy.setEnableDebug({ enableDebug: true });
      }
    } else if (data === 'prod') {
      const { confirm } = await wepy.showModal({
        title: 'Disable Debugging',
        content: 'Disable Debugging'
      });
      wepy.setClipboardData({ data: '' });
      if (confirm) {
        wepy.setEnableDebug({ enableDebug: false });
      }
    } else if (data === 'clear-cache') {
      const { confirm } = await wepy.showModal({
        title: 'Clear Storage',
        content: 'Clear Storage'
      });
      wepy.setClipboardData({ data: '' });
      if (confirm) {
        wepy.clearStorageSync();
        wepy.reLaunch({ url: './pages/index' });
      }
    }
  }
}
</script>
