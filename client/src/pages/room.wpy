<style lang="less">
@import '../style/room.less';
</style>
<template>
<view class="page">
  <view class="top-stick" wx:if="{{init && isCompleted && isHost}}">
    <view class="top-stick-hd">{{t.continue_msg}}</view>
    <view class="top-stick-ft">
      <button @tap="onAddTap">
        <image src="/images/plus.png"></image>
      </button>
    </view>
  </view>
  <view class="top-stick top-stick-story" wx:if="{{init && !isCompleted}}">
    <view class="top-stick-hd">{{currentStory.name}}</view>
    <view class="top-stick-bd">{{displayTimer}}</view>
    <view class="top-stick-ft">
      <button open-type="share">
        <image src="/images/user-plus.png"></image>
      </button>
    </view>
  </view>
  <view class="container" wx:if="{{init}}">
    <view class="page-body">
      <view class="page-section" wx:if="{{(!isHost || options.needScore) && !isCompleted}}">
        <view class="page-section-spacing">
          <view class="card-grids">
            <repeat class="card-grid" for="{{cards}}" item="card" key="key">
              <view class="card-grid">
                <card :card="card" :selectedCard="selectedCard"></card>
              </view>
            </repeat>
          </view>
        </view>
      </view>
      <view class="page-section-title player-title" wx:if="{{!isCompleted}}">
        <view class="player-title-hd">{{t.players}}</view>
        <view class="player-title-ft" wx:if="{{isHost}}">
          <button wx:if="{{options.isNoymous}}" @tap="onShowHideScore">
            <image src="/images/eye-close.png"></image>
          </button>
          <button wx:if="{{!options.isNoymous}}" @tap="onShowHideScore">
            <image src="/images/eye-open.png"></image>
          </button>
        </view>
      </view>
      <view class="page-section" wx:if="{{!isCompleted}}">
        <view class="page-section-spacing">
          <view class="player-box" wx:if="{{currentStory.scores && currentStory.scores.length}}">
            <repeat for="{{currentStory.scores}}" item="score" key="id">
              <playerBoxItem :score.sync="score" :isHost.sync="isHost" :isNoymous.sync="options.isNoymous"></playerBoxItem>
            </repeat>
          </view>
        </view>
      </view>
      <view class="page-section-title" wx:if="{{!isCompleted && isHost}}">{{t.result_calc}}</view>
      <view class="page-section" wx:if="{{!isCompleted && isHost}}">
        <view class="page-section-spacing">
          <view class="result-box">
            <picker @change="onCalcMethodChange" value="{{options.calcMethod}}" range="{{calcMethods}}" range-key="key">
              <view class="result">
                <view class="result-bd">{{calcMethods[options.calcMethod].key}}</view>
                <view class="result-ft"></view>
              </view>
            </picker>
            <picker @change="onResultChange" value="{{currentScore}}" range="{{results}}">
              <view class="result result-box-ft">
                <view class="result-bd">{{t.result}}</view>
                <view class="result-ft">{{currentScore || currentScore === 0 ? results[currentScore] : ''}}</view>
              </view>
            </picker>
          </view>
        </view>
      </view>
      <view class="btn-area" wx:if="{{!isCompleted && isHost}}">
        <button type="primary" loading="{{loading}}" @tap="onSaveTap">{{t.save_next_button}}</button>
      </view>
      <view class="page-section-divide" wx:if="{{!isCompleted && isHost}}"></view>
      <view class="page-section-title" wx:if="{{stories && stories.length}}">{{t.all_stories}}</view>
      <view class="page-section" wx:if="{{stories && stories.length}}">
        <view class="page-section-spacing">
          <view class="story-box">
            <repeat for="{{stories}}" item="story" key="id">
              <storyBoxItem :story.sync="story"></storyBoxItem>
            </repeat>
            <view class="story story-box-ft" wx:if="{{isCompleted}}">
              <view class="story-hd">{{storyCount + ' ' + (storyCount > 1 ? t.stories : t.story)}}</view>
              <view class="story-bd">{{displayTimerSum}}</view>
              <view class="story-ft">{{scoreSum}}</view>
            </view>
          </view>
        </view>
      </view>
      <view class="btn-area" wx:if="{{isCompleted}}">
        <button type="primary" @tap="onBackTap">{{t.finish_button}}</button>
      </view>
    </view>
    <feedback></feedback>
  </view>
  <view class="instruction-cover" wx:if="{{init && !isCompleted && showInstruction}}" @tap="onShowInstruction">
    <view class="top-stick top-stick-story">
      <view class="top-stick-hd"></view>
      <view class="top-stick-bd"></view>
      <view class="top-stick-ft">
        <button open-type="share" @tap="onShowInstruction">
          <image src="/images/user-plus.png"></image>
        </button>
      </view>
      <image class="instruction-scribble" src="/images/scribble.png"></image>
    </view>
    <view class="page-section">
      <view class="page-section-spacing page-section-empty">
        <view>{{t.instruction_line_1}}</view>
        <view>{{t.instruction_line_2}}</view>
      </view>
    </view>
  </view>
  <toptip></toptip>
</view>
</template>
<script>
import wepy from 'wepy';
import io from '@/vendors/socket.io-mp-client/socket.io-mp';
import Card from '@/components/card';
import Feedback from '@/components/feedback';
import PlayerBoxItem from '@/components/player-box-item';
import StoryBoxItem from '@/components/story-box-item';
import Toptip from '@/components/toptip';
import LocalesMixin from '@/mixins/locales-mixin';
import LoginMixin from '@/mixins/login-mixin';
import T from '@/utils/i18n';
import { calcMethods, cards, formatTimer, initResults, INSTRUCTION_KEY, SHOW_HIDE_SCORE_KEY } from '@/utils/utils';

export default class Room extends wepy.page {
  data = {
    init: false,
    loading: false,
    showInstruction: false,
    cards,
    calcMethods,
    results: initResults,
    stories: null,
    currentScore: null,
    currentStory: null,
    selectedCard: null,
    options: null,
    isHost: false
  };

  computed = {
    isCompleted() {
      return !this.currentStory;
    },
    displayTimer() {
      return this.currentStory ? formatTimer(this.currentStory.timer || 0) : '';
    },
    storyCount() {
      return this.stories ? this.stories.length : 0;
    },
    displayTimerSum() {
      let timerSum = 0;
      if (this.stories) {
        this.stories.forEach(story => {
          timerSum += story.timer;
        });
      }
      return formatTimer(timerSum);
    },
    scoreSum() {
      let scoreSum = 0;
      if (this.stories) {
        this.stories.forEach(story => {
          scoreSum += story.score;
        });
      }
      return scoreSum;
    }
  }

  components = {
    card: Card,
    feedback: Feedback,
    playerBoxItem: PlayerBoxItem,
    storyBoxItem: StoryBoxItem,
    toptip: Toptip
  };

  mixins = [LocalesMixin, LoginMixin];

  methods = {
    onAddTap() {
      this.$navigate(`add-story?id=${this.id}`);
    },
    async onShowHideScore() {
      const isNoymous = !this.options.isNoymous;
      if (isNoymous) {
        if (wepy.getStorageSync(SHOW_HIDE_SCORE_KEY)) {
          this.$invoke('toptip', 'show', {
            duration: 3000,  // 可选
            type: 'success', // 可选. 或者 'error'
            text: this.t['show_hide_score_toptip']
          });
        } else {
          const res = await wepy.showModal({ content: this.t['show_hide_score_content'] });
          if (!res.confirm) {
            return;
          }
          wepy.setStorageSync(SHOW_HIDE_SCORE_KEY, true);
        }
      }

      this.socket.emit('[Poker] show hide score', { id: this.id, isNoymous });
    },
    onSaveTap() {
      if (this.loading) return;
      this.loading = true;
      this.socket.emit('[Poker] next story', { id: this.id });
    },
    onCalcMethodChange(e) {
      const calcMethod = parseInt(e.detail.value);
      this.socket.emit('[Poker] calc method', { id: this.id, calcMethod });
    },
    onResultChange(e) {
      const currentScore = parseInt(e.detail.value);
      this.socket.emit('[Poker] current score', { id: this.id, currentScore });
    },
    onBackTap() {
      if (getCurrentPages().length > 1) { // eslint-disable-line
        wepy.navigateBack({ delta: 1 });
      } else {
        this.$redirect('index');
      }
    },
    onShowInstruction() {
      this.showInstruction = false;
      wepy.setStorageSync(INSTRUCTION_KEY, true);
    }
  };

  watch = {
    t() {
      this.calcMethods.forEach(calc => {
        calc.key = T._(`common.calc_method.${calc.lang}`);
      });
      this.$apply();
    }
  }

  events = {
    'card-tap': (card) => {
      this.selectedCard = card.value === this.selectedCard ? null : card.value;
      this.socket.emit('[Poker] select card', { id: this.id, card: this.selectedCard });
    }
  };

  socket = null;

  interval = null;

  onShareAppMessage() {
    return { title: this.name };
  }

  formatTimer(timer) {
    formatTimer(timer);
  }

  onLoad(options) {
    this.id = Number(options.id);

    this.showInstruction = !wepy.getStorageSync(INSTRUCTION_KEY);

    const { socketUrl } = wepy.$appConfig;

    if (!this.$parent.globalData.socket && this.$parent.globalData.token) {
      this.$parent.globalData.socket = io(socketUrl, {
        transparent: ['websocket'],
        query: 'token=' + this.$parent.globalData.token
      });
    }

    this.socket = this.$parent.globalData.socket;

    this.socket.on('[Poker] init', ({ id, ...payload }) => {
      if (id !== this.id) return;
      if (payload.stories && payload.stories.length) {
        payload.stories = payload.stories.filter(s => s.isCompleted && !s.isDeleted);
      }

      if (payload.currentStory) {
        const title = payload.name;
        wepy.setNavigationBarTitle({ title });
        this.init = true;
        for (const key in payload) {
          if (payload.hasOwnProperty(key)) {
            this[key] = payload[key];
          }
        }
        this.$apply();

        if (!this.interval) {
          this.interval = setInterval(() => {
            if (this.currentStory) {
              this.currentStory.timer++;
              this.$apply();
            } else {
              clearInterval(this.interval);
              this.interval = null;
            }
          }, 1000);
        }
      } else {
        this.$redirect(`room-detail?id=${id}`);
      }
    });

    this.socket.on('[Poker] action', ({ id, ...payload }) => {
      if (id !== this.id) return;
      if (payload.stories && payload.stories.length) {
        payload.stories = payload.stories.filter(s => s.isCompleted && !s.isDeleted);
      }

      for (const key in payload) {
        if (payload.hasOwnProperty(key)) {
          this[key] = payload[key];
        }
      }
      this.$apply();

      if (payload.closed) {
        this.$redirect(`room-detail?id=${id}`);
      }

      if (!this.interval && payload.currentStory) {
        this.interval = setInterval(() => {
          if (this.currentStory) {
            this.currentStory.timer++;
            this.$apply();
          } else {
            clearInterval(this.interval);
            this.interval = null;
          }
        }, 1000);
      }
    });

    this.socket.on('error', (content = '') => wepy.showModal({
      title: 'Error',
      content,
      showCancel: false,
      success: () => this.onBackTap()
    }));
  }

  onShow() {
    this.joinRoom();
  }

  onUnload() {
    this.leaveRoom();
  }

  onHide() {
    this.leaveRoom();
  }

  joinRoom() {
    this.socket.emit('[Poker] join room', { id: this.id });
  }

  leaveRoom() {
    this.socket.emit('[Poker] leave room', { id: this.id });
    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    }
  }
}

</script>
